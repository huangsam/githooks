{"name":"Githooks","tagline":"Git hooks for both open-source and work-related projects","body":"# Introduction\r\n\r\nThese hooks are the culmination of policies that I typically\r\nenforce for Python projects. Some of these hooks utilize\r\n[flake8](https://pypi.python.org/pypi/flake8) to ensure PEP8\r\ncompliance, logical flow and an appropriate level of complexity.\r\nOther hooks utilize the `check-msg` script to ensure that\r\nproposed commit messages are formatted correctly for\r\n[JIRA](https://www.atlassian.com/software/jira) pull requests.\r\n\r\n## Design Decisions\r\n\r\nThese Git hooks utilize a mix of Python and Shell. Python offers\r\na clean approach to procedural programming while Shell offers\r\nexcellent text processing and file management utilities.\r\n\r\nMany of the Git hooks had lines of code that shared common\r\nverification tasks, which resulted in unnecessary bloat. To counter\r\nthis effect, verification functionality was centralized into\r\n`check-msg` and `verify` to minimize code redundancy and\r\nmaximize hook maintainability.\r\n\r\n## Installation\r\n\r\nRun the `generate-hooks.sh` script to generate the necessary\r\nhook executables. All executables should now reside in the newly\r\ncreated `hooks` folder. Finally, replace the `.git/hooks` folder\r\nwithin your desired project with the generated `hooks` folder\r\nto enable project policies.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}